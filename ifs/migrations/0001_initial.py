# Generated by Django 5.1.6 on 2025-04-24 09:31

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('enr', '0011_benchmarkedenrparameter'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChartererList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=1, max_length=100)),
                ('abv', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='CharterType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='FuelOilType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fueloil_name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='VoyageList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voyage_number', models.IntegerField()),
                ('start_datetime', models.DateTimeField()),
                ('end_datetime', models.DateTimeField()),
                ('status', models.CharField(max_length=255)),
                ('charter_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ifs.chartertype')),
                ('charterer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ifs.chartererlist')),
                ('vessel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='enr.vessellist')),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trip_id', models.IntegerField()),
                ('port_name', models.CharField(max_length=100)),
                ('purpose', models.CharField(max_length=20)),
                ('visited', models.BooleanField(default=False)),
                ('current', models.BooleanField(default=False)),
                ('arrival_date', models.DateTimeField()),
                ('voyage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route', to='ifs.voyagelist')),
            ],
        ),
        migrations.CreateModel(
            name='VoyageDataEngine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trip_number', models.CharField(max_length=3)),
                ('date_time', models.DateTimeField()),
                ('timezone', models.IntegerField()),
                ('activity', models.CharField(max_length=20)),
                ('step', models.CharField(max_length=20)),
                ('duration', models.IntegerField(help_text='Duration in minutes')),
                ('loc_atfrom', models.CharField(blank=True, max_length=5, null=True)),
                ('loc_to', models.CharField(blank=True, max_length=5, null=True)),
                ('engine_merpm', models.FloatField(blank=True, null=True, verbose_name='ME Engine RPM')),
                ('engine_meload', models.FloatField(blank=True, null=True, verbose_name='ME Engine Load in kw')),
                ('engine_proprpm', models.FloatField(blank=True, null=True, verbose_name='ME Engine Propeller RPM')),
                ('engine_speed', models.FloatField(blank=True, null=True, verbose_name='ME Engine Speed')),
                ('engine_propcpp', models.FloatField(blank=True, null=True, verbose_name='ME Engine Propeller CPP (if any)')),
                ('me_fm_in', models.IntegerField(blank=True, null=True, verbose_name='ME Engine Flowmeter In Reading')),
                ('me_fm_out', models.IntegerField(blank=True, null=True, verbose_name='ME Flowmeter Out Reading')),
                ('me_fo_cons', models.IntegerField(blank=True, null=True)),
                ('me_do_cons', models.IntegerField(blank=True, null=True)),
                ('me_cons_check', models.IntegerField(blank=True, null=True)),
                ('me_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('boiler_fm_in', models.IntegerField(blank=True, null=True)),
                ('boiler_fm_out', models.IntegerField(blank=True, null=True)),
                ('boiler_fo_cons', models.IntegerField(blank=True, null=True)),
                ('boiler_do_cons', models.IntegerField(blank=True, null=True)),
                ('boiler_cons_check', models.IntegerField(blank=True, null=True)),
                ('boiler_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('aux_fm', models.IntegerField(blank=True, null=True)),
                ('aux1_do_cons', models.IntegerField(blank=True, null=True)),
                ('aux2_do_cons', models.IntegerField(blank=True, null=True)),
                ('aux3_do_cons', models.IntegerField(blank=True, null=True)),
                ('aux_cons_check', models.IntegerField(blank=True, null=True)),
                ('aux1_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('aux2_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('aux3_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('cc1_do_cons', models.IntegerField(blank=True, null=True)),
                ('cc2_do_cons', models.IntegerField(blank=True, null=True)),
                ('cc3_do_cons', models.IntegerField(blank=True, null=True)),
                ('cc4_do_cons', models.IntegerField(blank=True, null=True)),
                ('cc5_do_cons', models.IntegerField(blank=True, null=True)),
                ('cc6_do_cons', models.IntegerField(blank=True, null=True)),
                ('cc1_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('cc2_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('cc3_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('cc4_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('cc5_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('cc6_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('eg_do_cons', models.IntegerField(blank=True, null=True)),
                ('eg_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('bt_do_cons', models.IntegerField(blank=True, null=True)),
                ('bt_rh', models.IntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('other_fo_cons', models.IntegerField(blank=True, null=True)),
                ('other_do_cons', models.IntegerField(blank=True, null=True)),
                ('total_fo_cons_in_kl', models.FloatField(blank=True, null=True)),
                ('total_do_cons_in_kl', models.FloatField(blank=True, null=True)),
                ('fo_rob_in_kl', models.FloatField(blank=True, null=True)),
                ('fo_fots', models.FloatField(blank=True, null=True)),
                ('fo_correction', models.FloatField(blank=True, null=True)),
                ('fo_supply', models.FloatField(blank=True, null=True)),
                ('fo_supply_type', models.CharField(blank=True, max_length=10, null=True)),
                ('do_rob_in_kl', models.FloatField(blank=True, null=True)),
                ('do_fots', models.FloatField(blank=True, null=True)),
                ('do_correction', models.FloatField(blank=True, null=True)),
                ('do_supply', models.FloatField(blank=True, null=True)),
                ('do_supply_type', models.CharField(blank=True, max_length=10, null=True)),
                ('fo_sg', models.FloatField(blank=True, null=True)),
                ('do_sg', models.FloatField(blank=True, null=True)),
                ('total_fo_cons_in_mt', models.FloatField(blank=True, null=True)),
                ('total_do_cons_in_mt', models.FloatField(blank=True, null=True)),
                ('fo_rob_in_mt', models.FloatField(blank=True, null=True)),
                ('do_rob_in_mt', models.FloatField(blank=True, null=True)),
                ('remarks', models.CharField(blank=True, max_length=100, null=True)),
                ('vessel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='enr.vessellist')),
                ('voyage_number', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ifs.voyagelist')),
            ],
            options={
                'unique_together': {('vessel', 'voyage_number', 'date_time')},
            },
        ),
    ]
